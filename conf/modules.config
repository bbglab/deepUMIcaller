/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: CALLDUPLEXCONSENSUSREADS {
        ext.args = "--min-reads ${params.call_min_reads_duplex} --min-input-base-quality ${params.call_min_baseq}"
    }

    withName: CALLMOLECULARCONSENSUSREADS {
        ext.args = "--min-reads ${params.call_min_reads} --min-input-base-quality ${params.call_min_baseq}"
    }

    withName: GROUPREADSBYUMI {
        ext.args = "--edits ${params.groupreadsbyumi_edits}"
    }

    withName: GROUPREADSBYUMIDUPLEX {
        ext.args = "--edits ${params.groupreadsbyumi_edits}"
    }
    

    withName: 'ENSEMBLVEP_DOWNLOAD' {
        ext.args         = '--AUTO c --CONVERT --NO_BIOPERL --NO_HTSLIB --NO_TEST --NO_UPDATE'
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/cache/" }
        ]
    }

    withName: 'ENSEMBLVEP_VEP' {
        ext.args         = { [
            "${params.vep_params}",
            (params.vep_out_format)   ? "--${params.vep_out_format}"  : '--tab'
        ].join(' ').trim() }
        
        // If just VEP: <vcf prefix>_VEP.ann.vcf
        // ext.prefix       = { "${vcf.baseName.minus(".vcf")}_VEP.ann" }
        if (!params.vep_cache && !params.download_cache)    container = { params.vep_genome ? "nfcore/vep:${params.vep_version}.${params.vep_genome}" : "nfcore/vep:${params.vep_version}.${params.genome}" }
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/annotation/${meta.id}/" },
                pattern: "*{gz}"
            ]
        ]
    }
    
    withName: "NFCORE_FASTQUORUM:FASTQUORUM:VCFANNOTATEALLDUPLEX:.*:.*" {
            ext.prefix       = { "${meta.id}.duplex" }
    }
    
    withName: "NFCORE_FASTQUORUM:FASTQUORUM:VCFANNOTATEALL:.*:.*" {
            ext.prefix       = { "${meta.id}.non_duplex" }
    }

    withName: 'FASTQTOBAM' {
        publishDir       = [
                enabled : false
        ]
    }
    withName: 'ALIGNRAWBAM' {
        publishDir       = [
                enabled : false
        ]
    }
    withName: 'CALLDUPLEXCONSENSUSREADS' {
        publishDir       = [
                enabled : false
        ]
    }
    withName: 'CLIPBAM' {
        publishDir       = [
                enabled : false
        ]
    }
    withName: 'SORTBAM.*' {
        ext.prefix       = { "${meta.id}.sorted" }
        ext.args         = " --write-index" 
    }
    withName: 'FILTERCONSENSUSREADSDUPLEX' {
        ext.fgbio_args      = " --min-reads ${params.filter_min_reads} \
                                --min-base-quality ${params.filter_min_baseq} \
                                --max-base-error-rate ${params.filter_max_base_error_rate} \
                                --max-no-call-fraction ${params.maxN_prop_per_read} \
                                --require-single-strand-agreement ${params.filter_strand_agreement}"
        publishDir       = [
                enabled : false
        ]
    }

}

// 