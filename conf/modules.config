/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTP {
        ext.args = [ "",
                    params.trim_fastq              ?: "--disable_adapter_trimming",
                    params.three_prime_clip_r1 > 0 ? "--trim_tail1 ${params.three_prime_clip_r1}" : "", // Remove bp from the 3' end of read 1 AFTER adapter/quality trimming has been performed
                    params.three_prime_clip_r2 > 0 ? "--trim_tail2 ${params.three_prime_clip_r2}" : "", // Remove bp from the 3' end of read 2 AFTER adapter/quality trimming has been performed
                    params.trim_nextseq            ? "--trim_poly_g"                              : "", // Apply the --nextseq=X option, to trim based on quality after removing poly-G tails
                ].join(" ").trim()
        publishDir       = [
                enabled : false
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: 'ENSEMBLVEP_DOWNLOAD' {
        ext.args         = '--AUTO c --CONVERT --NO_BIOPERL --NO_HTSLIB --NO_TEST --NO_UPDATE'
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/cache/" }
        ]
    }

    withName: 'FASTQTOBAM' {
        publishDir       = [
                enabled : false
        ]
    }
    
    withName: 'ALIGN.*BAM' {
        ext.bwa_args         = { "-5 -K 100000000" }
    }
    // ext.bwa_args         = { "-5 -L 1,1 -K 100000000" }

    withName: 'ALIGNRAWBAM' {
        publishDir       = [
                enabled : false
        ]
    }
    
    withName: 'SORTBAM.*' {
        ext.prefix       = { "${meta.id}.sorted" }
        ext.args         = " --write-index"
    }

    withName: GROUPREADSBYUMI {
        ext.args = "--edits ${params.groupreadsbyumi_edits}"
    }

    withName: GROUPREADSBYUMIDUPLEX {
        ext.args = "--edits ${params.groupreadsbyumi_edits}"
    }

    withName: CALLDUPLEXCONSENSUSREADS {
        ext.args = "--min-reads ${params.call_min_reads_duplex} \
                    --min-input-base-quality ${params.call_min_baseq} \
                    --trim true"
        publishDir       = [
                enabled : false
        ]
    }

    withName: CALLMOLECULARCONSENSUSREADS {
        ext.args = "--min-reads ${params.call_min_reads} \
                    --min-input-base-quality ${params.call_min_baseq} \
                    --trim true"
    }

    withName: COLLECTDUPLEXSEQMETRICS {
        ext.args = "--duplex-umi-counts=true"
    }

    withName: 'CLIPBAM' {
        ext.args         = "--clipping-mode Hard \
                            --clip-overlapping-reads true \
                            --clip-bases-past-mate true \
                            --auto-clip-attributes true"
        publishDir       = [
                enabled : false
        ]
    }
    
    withName: 'FILTERCONSENSUSREADSDUPLEX' {
        ext.fgbio_args      = " --min-reads ${params.filter_min_reads} \
                                --min-base-quality ${params.filter_min_baseq} \
                                --max-base-error-rate ${params.filter_max_base_error_rate} \
                                --max-no-call-fraction ${params.maxN_prop_per_read} \
                                --require-single-strand-agreement ${params.filter_strand_agreement}"
        publishDir       = [
                enabled : false
        ]
    }

    withName: "DEEPUMICALLER:VCFANNOTATEALLDUPLEX:.*:.*" {
            ext.prefix       = { "${meta.id}.duplex" }
    }
    
    withName: "DEEPUMICALLER:VCFANNOTATEALL:.*:.*" {
            ext.prefix       = { "${meta.id}.non_duplex" }
    }

    withName: 'ENSEMBLVEP_VEP' {
        ext.args         = { [
            "${params.vep_params}",
            (params.vep_out_format)   ? "--${params.vep_out_format}"  : '--tab'
            ].join(' ').trim() }
        
        // If just VEP: <vcf prefix>_VEP.ann.vcf
        // ext.prefix       = { "${vcf.baseName.minus(".vcf")}_VEP.ann" }
        if (!params.vep_cache && !params.download_cache)    container = { params.vep_genome ? "nfcore/vep:${params.vep_version}.${params.vep_genome}" : "nfcore/vep:${params.vep_version}.${params.genome}" }
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/annotation/${meta.id}/" },
                pattern: "*{gz}"
            ]
        ]
    }

    withName: 'SIGPROFPLOT.*' {
        ext.args      = "plot=True, \
                            exome=False, \
                            bed_file=None, \
                            chrom_based=False,\
                            tsb_stat=False,\
                            seqInfo=False,\
                            cushion=100,"
        ext.prefix = { "PROMINENT05" }
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }



}

// 