/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ".*FASTQC" {
        ext.args = '--quiet'
    }

    withName: 'ENSEMBLVEP_DOWNLOAD' {
        ext.args         = '--AUTO c --CONVERT --NO_BIOPERL --NO_HTSLIB --NO_TEST --NO_UPDATE'
        publishDir       = [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/cache/" }
        ]
    }

    withName: 'FASTQTOBAM' {
        publishDir       = [
                enabled : false
        ]
    }

    withName: FASTP {
        ext.args = [ "",
                    params.trim_adapters           ?: "--disable_adapter_trimming",
                    params.three_prime_clip_r1 > 0 ? "--trim_tail1 ${params.three_prime_clip_r1}" : "", // Remove bp from the 3' end of read 1 AFTER adapter/quality trimming has been performed
                    params.three_prime_clip_r2 > 0 ? "--trim_tail2 ${params.three_prime_clip_r2}" : "", // Remove bp from the 3' end of read 2 AFTER adapter/quality trimming has been performed
                    params.trim_nextseq            ? "--trim_poly_g"                              : "", // Apply the --nextseq=X option, to trim based on quality after removing poly-G tails
                ].join(" ").trim()
        publishDir       = [
                enabled : false
        ]
    }
    
    withName: 'ALIGN.*BAM' {
        ext.bwa_args         = { "-5 -L 1,1 -K 100000000" }
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'TRIMBAM' {
        publishDir       = [
                enabled : false
        ]
    }
    
    withName: 'SORTBAM.*' {
        ext.prefix       = { "${meta.id}.sorted" }
        ext.args         = " --write-index"
    }
    withName: 'SORTBAM|SORTBAMDUPLEX' {
        publishDir       = [
                enabled : false
        ]
    }
    withName: 'SORTBAMCLEAN' {
        ext.prefix       = { "${meta.id}.sorted" }
        ext.args         = " --template-coordinate --write-index"
    }
    withName: 'SORTBAMDUPLEXFILTERED' {
        ext.prefix       = { "${meta.id}.sorted" }
        ext.args         = " -n"
    }
    withName: 'SORTBAMDUPLEXCLEAN' {
        ext.prefix = { params.step in ['filterconsensus'] ? "${meta.id}.new.sorted" : "${meta.id}.sorted" }
    }
    withName: 'ASMINUSXS.*' {
        publishDir       = [
                                mode: params.publish_dir_mode,
                                path: { "${params.outdir}/asxsdiscarded/" },
                                pattern: "*.discarded_AS-XS*.bam",
                                enabled : false
                            ]
        ext.prefix       = { "${meta.id}.filtered.AS-XS_${params.asminusxs_thres}" }
        ext.threshold    = "${params.asminusxs_thres}"
    }
    withName: 'SAMTOOLSFILTER.*' {
        publishDir       = [
                enabled : false
        ]
        ext.prefix       = { "${meta.id}.filtered.AS-XS_${params.asminusxs_thres}.0x2" }
        ext.args         = "-b -h --require-flags 0x2 --exclude-flags 0x900"
    }

    withName: "DEEPUMICALLER:BAM_FILTER_READS:SORTBAMFIXED" {
        publishDir       = [
                enabled : false
        ]
    }

    withName: "DEEPUMICALLER:BAM_FILTER_READS:FGSELECTREADS" {
        ext.samtools_args  = "-F 0x4 -F 0x8"
        publishDir         = [
                enabled : false
        ]
    }
    withName: "DEEPUMICALLER:BAM_FILTER_READS:FILTERBAM" {
        ext.args         = "--output-fmt bam \
                            --with-header"
        ext.prefix       = { "${meta.id}.region_filtered" } 
        publishDir       = [
                enabled : false
        ]
    }


    withName: 'QUALIMAPQC.*' {
        ext.args         = "--paint-chromosome-limits --genome-gc-distr HUMAN --skip-dup-mode 0 -outformat HTML"
    }
    withName: 'QUALIMAPQCDUPLEX' {
        ext.prefix       = { "${meta.id}.all_molecules" }
    }
    withName: 'QUALIMAPQCHIGH' {
        ext.prefix       = { "${meta.id}.high" }
    }
    withName: 'QUALIMAPQCMED' {
        ext.prefix       = { "${meta.id}.med" }
    }
    withName: 'QUALIMAPQCLOW' {
        ext.prefix       = { "${meta.id}.low" }
    }

    withName: 'DISCARDEDCOVERAGE.*' {
        ext.args         = "-mean"
    }


    withName: GROUPREADSBYUMIDUPLEX {
        ext.args = "--edits ${params.groupreadsbyumi_edits} \
                    --min-map-q ${params.groupreadsbyumi_min_map_q}"
        publishDir       = [
                enabled : false
        ]
    }

    withName: CALLDUPLEXCONSENSUSREADS {
        ext.args = "--min-reads ${params.call_min_reads_duplex} \
                    --min-input-base-quality ${params.call_min_baseq} \
                    --consensus-call-overlapping-bases true"
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'COLLECTDUPLEXSEQMETRICS.*' {
        ext.args = "--duplex-umi-counts=true"
    }

    withName: 'CLIPBAM.*' {
        ext.args         = "--clipping-mode Hard \
                            --clip-overlapping-reads true \
                            --clip-bases-past-mate true \
                            --auto-clip-attributes true"
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'FILTERCONSENSUSREADSAM' {
        ext.fgbio_args      = " --min-reads ${params.filter_min_reads_am} \
                                --min-base-quality ${params.filter_min_baseq_am} \
                                --max-base-error-rate ${params.filter_max_base_error_rate_am} \
                                --max-no-call-fraction ${params.maxN_prop_per_read} \
                                --require-single-strand-agreement false"
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'FILTERCONSENSUSREADSHIGH' {
        ext.fgbio_args      = " --min-reads ${params.filter_min_reads_high} \
                                --min-base-quality ${params.filter_min_baseq_high} \
                                --max-base-error-rate ${params.filter_max_base_error_rate_high} \
                                --max-no-call-fraction ${params.maxN_prop_per_read} \
                                --require-single-strand-agreement ${params.filter_strand_agreement}"
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'FILTERCONSENSUSREADSMED' {
        ext.fgbio_args      = " --min-reads ${params.filter_min_reads_med} \
                                --min-base-quality ${params.filter_min_baseq_med} \
                                --max-base-error-rate ${params.filter_max_base_error_rate_med} \
                                --max-no-call-fraction ${params.maxN_prop_per_read} \
                                --require-single-strand-agreement ${params.filter_strand_agreement}"
        publishDir       = [
                enabled : false
        ]
    }


    // not filtering for double strand agreement
    withName: 'FILTERCONSENSUSREADSLOW' {
        ext.fgbio_args      = " --min-reads ${params.filter_min_reads_low} \
                                --min-base-quality ${params.filter_min_baseq_low} \
                                --max-base-error-rate ${params.filter_max_base_error_rate_low} \
                                --max-no-call-fraction ${params.maxN_prop_per_read}"
        publishDir       = [
                enabled : false
        ]
    }

    withName: 'CREATEBED_FROM_TSV' {
        ext.args      = " -d 20"
//        publishDir       = [
//                enabled : false
//        ]
    }


    withName: 'CALLINGVARDICT.*' {
        ext.args         = params.vardict_params
        ext.filter_args  = params.vardict_filter_params
    }


    withName: "DEEPUMICALLER:VCFANNOTATEHIGH:.*:.*" {
            ext.prefix       = { "${meta.id}.high" }
    }
    
    withName: "DEEPUMICALLER:VCFANNOTATEMED:.*:.*" {
            ext.prefix       = { "${meta.id}.med" }
    }

    withName: "DEEPUMICALLER:VCFANNOTATELOW:.*:.*" {
            ext.prefix       = { "${meta.id}.low" }
    }

    withName: "DEEPUMICALLER:RECOUNTMUTSHIGH:.*" {
            ext.prefix       = { "${meta.id}.high" }
    }

    withName: "DEEPUMICALLER:RECOUNTMUTSMED:.*" {
            ext.prefix       = { "${meta.id}.med" }
    }

    withName: "DEEPUMICALLER:RECOUNTMUTSLOW:.*" {
            ext.prefix       = { "${meta.id}.low" }
    }

    withName: "DEEPUMICALLER:RECOUNTMUTS.*:READJUSTREGIONS" {
        ext.amplify   = 2
    }

    withName: "DEEPUMICALLER:RECOUNTMUTS.*:PATCHDPALL" {
        ext.suffix       = "AM"
    }

    withName: "DEEPUMICALLER:RECOUNTMUTS.*:PILEUPBAM.*" {
        ext.args         = "--no-BAQ \
                            --max-depth 0 \
                            --min-BQ 2 \
                            --no-output-ends \
                            --output-extra QNAME"
    }

    withName: "FILTERLOWCOMPLEX|FILTERLOWMAPPABLE|PILEUPBAM.*|QUERYTABIX|BEDTOINTERVAL|READJUSTREGIONS" {
        publishDir       = [
                enabled : false
        ]
    }

    withName: "MUTSPERPOS" {
        ext.read_size       = params.final_read_size
    }


    withName: 'FILTERNRICH' {
        ext.filter_name     = "n_rich"
        ext.minimum_depth   = "25"
        publishDir = [
            path: { "${params.outdir}/mutations_vcf" },
            mode: params.publish_dir_mode,
            pattern: "*.filtered.vcf"
        ]
    }
    
    withName: 'FILTERVCFSOMATIC' {
        ext.vaf_filter      = "0.35"
        ext.filters         = "no_pileup_support,low_complex_repetitive,low_mappability,n_rich"
        ext.splitting       = "True"
        publishDir       = [
                enabled : false
        ]
    }
    withName: 'FILTERVCFPLOT' {
        ext.vaf_filter      = "0.35"
        ext.filters         = "no_pileup_support,low_complex_repetitive,low_mappability,n_rich,singletons_only"
        publishDir       = [
                enabled : false
        ]
    }


    withName: 'SIGPROFPLOT.*' {
        ext.args      = ""
        ext.prefix = "${params.projectname}"
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'ENSEMBLVEP_VEP' {
        ext.args         = { [
            "${params.vep_params}",
            (params.vep_out_format)   ? "--${params.vep_out_format}"  : '--tab'
            ].join(' ').trim() }
        
        // If just VEP: <vcf prefix>_VEP.ann.vcf
        // ext.prefix       = { "${vcf.baseName.minus(".vcf")}_VEP.ann" }
        if (!params.vep_cache && !params.download_cache)    container = { params.vep_genome ? "nfcore/vep:${params.vep_version}.${params.vep_genome}" : "nfcore/vep:${params.vep_version}.${params.vep_genome}" }
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/annotation/${meta.id}/" },
                pattern: "*{gz}"
            ]
        ]
    }

    withName: "DEEPUMICALLER:RECOUNTMUTSLOW:.*" {
        errorStrategy = { task.exitStatus in [143,137,104,134,139,140] ? 'retry' : 'ignore' }
    }


}
