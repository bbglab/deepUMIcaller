/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    bbglab/deepUMIcaller Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    cpus   = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time   = { check_max( 24.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139,140] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // TODO nf-core: Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors

    // Ultra-minimal processes (1 CPU, 512MB, 2h)
    withLabel: 'process_single' {
        cpus   = { check_max( 1 * task.attempt, 'cpus' ) }
        memory = { check_max( 512.MB * task.attempt, 'memory' ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    // Low CPU processes (2 CPUs, 8GB, 6h)
    withLabel: 'process_low' {
        cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
// Low CPU with medium memory (2 CPUs, 16GB, 12h)
    withLabel: 'process_low_memory' {
        cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time   = { check_max( 12.h * task.attempt, 'time' ) }
    }
    
    // Medium-low CPU processes (8 CPUs, 4GB, 12h)
    withLabel: 'process_medium_low' {
        cpus   = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 12.h * task.attempt, 'time' ) }
    }
    
    // Medium CPU processes (16 CPUs, 4GB, 8h)
    withLabel: 'process_medium' {
        cpus   = { check_max( 16 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
        time   = { check_max( 8.h * task.attempt, 'time' ) }
    }
    
    // Medium CPU with medium memory (16 CPUs, 16GB, 8h)
    withLabel: 'process_medium_memory' {
        cpus   = { check_max( 16 * task.attempt, 'cpus' ) }
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time   = { check_max( 8.h * task.attempt, 'time' ) }
    }
    
    // Medium CPU with high memory (16 CPUs, 32GB, 16h)
    withLabel: 'process_medium_high_memory' {
        cpus   = { check_max( 16 * task.attempt, 'cpus' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time   = { check_max( 16.h * task.attempt, 'time' ) }
    }
    
    // High CPU processes (32 CPUs, 32GB, 24h)
    withLabel: 'process_high' {
        cpus   = { check_max( 32 * task.attempt, 'cpus' ) }
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h * task.attempt, 'time' ) }
    }
    
    // Very high CPU processes (64 CPUs, 128GB, 48h)
    withLabel: 'process_very_high' {
        cpus   = { check_max( 64 * task.attempt, 'cpus' ) }
        memory = { check_max( 128.GB * task.attempt, 'memory' ) }
        time   = { check_max( 48.h * task.attempt, 'time' ) }
    }
    
    // High memory processes (2 CPUs, 200GB, 24h)
    withLabel: 'process_high_memory' {
        cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
        time   = { check_max( 24.h * task.attempt, 'time' ) }
    }
    
    // Memory-intensive processes (2 CPUs, 128GB, 36h)
    withLabel: 'process_memory_intensive' {
        cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 128.GB * task.attempt, 'memory' ) }
        time   = { check_max( 36.h * task.attempt, 'time' ) }
    }
    
    // Single CPU with medium-low memory (1 CPU, 8GB, 8h)
    withLabel: 'process_single_medium_memory' {
        cpus   = { check_max( 1 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
        time   = { check_max( 8.h * task.attempt, 'time' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }
}
